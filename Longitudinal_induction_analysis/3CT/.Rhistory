#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
# scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("social_preference_relative") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 1.3,
annotations = c("ns")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1.15,
annotations = c("ns")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = social_cond, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
novelty_cond$ID <- as.factor(novelty_cond$ID)
p_load(rstatix)
#outliers - 2
novelty_cond %>%
group_by(Week) %>%
identify_outliers(novelty_preference_relative)
#normality - holds
novelty_cond %>%
group_by(Week) %>%
shapiro_test(novelty_preference_relative)
by(novelty_cond$novelty_preference_relative, novelty_cond$Week, shapiro.test)
#sphericity - similar to the homogeneity of variance in between-group anova)
#sphericity not broken
anova_test(data = novelty_cond, dv = novelty_preference_relative, wid = ID, within = Week)
#F Indicates that we are comparing to an F-distribution (F-test); (2, 18) indicates the degrees of freedom in the numerator (DFn) and the denominator (DFd), respectively; 55.5 indicates the obtained F-statistic valuef
#p specifies the p-value
#ges is the generalized effect size (amount of variability due to the within-subjects factor)
novelty_cond$ID <- as.factor(novelty_cond$ID)
novelty_cond$Week <- factor(novelty_cond$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
aov_anova <- aov_car(novelty_preference_relative ~ Week+ Error(ID /Week), data=novelty_cond)
summary(aov_anova)
#post-hoc
p_load(emmeans)
ph<-emmeans(aov_anova, pairwise ~ Week, conf.level = 0.95)
ph
confint(ph)  #for confidence intervals
test(ph) # for p values
p_load(performance)
check_model(aov_anova)
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(novelty_cond, aes(x = Week, y = novelty_preference_relative)) +
geom_beeswarm(data = novelty_cond, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("novelty_preference_relative") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 1.2,
annotations = c("ns")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1.1,
annotations = c("ns")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = novelty_cond, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
social_cond$Week <- factor(social_cond$Week, levels = c("Preinduction","1st week post induction","2nd week post induction"))
#creating a linear model of the same variables as included in the anova
m_anova <-lmer(social_preference_relative ~  Week + (1|ID), data=social_cond)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova,pairwise ~ Week, conf.level = 0.95)
emmeans_results
class(emmeans_results)
emm_single <- emmeans_results[[1]]  # Extract the first emmGrid object
class(emm_single)
pairwise_results <- contrast(emm_single, method = "pairwise")
class(pairwise_results)
#pairwise_results <- lapply(emmeans_results, contrast, method = "pairwise")
# Perform pairwise comparisons
#pairwise_results <- contrast(emmeans_results, method = "pairwise")
# Display the results
summary(pairwise_results)
#bonferroni
#pwc <- pairs(emmeans_results, adjust = "bon")
#pwc
pwc <- contrast(emm_single, method = "pairwise", adjust = "bon")
summary(pwc)
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(social_cond, aes(x = Week, y = social_preference_relative)) +
geom_beeswarm(data = social_cond, size = 2.5, aes(color = ID)) +
ylab("Social Preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 1.3,
annotations = c("0.1163")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1.15,
annotations = c("0.0044")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1,
annotations = c("0.3429")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = social_cond, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
novelty_cond$ID <- as.factor(novelty_cond$ID)
novelty_cond$Week <- factor(novelty_cond$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
aov_anova <- aov_car(novelty_preference_relative ~ Week+ Error(ID /Week), data=novelty_cond)
summary(aov_anova)
#post-hoc
p_load(emmeans)
ph<-emmeans(aov_anova, pairwise ~ Week, conf.level = 0.95)
ph
confint(ph)  #for confidence intervals
test(ph) # for p values
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
novelty_cond$Week <- factor(novelty_cond$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
#creating a linear model of the same variables as included in the anova
m_anova <-lmer(novelty_preference_relative ~  Week + (1|ID), data=novelty_cond)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova, ~ Week)
# Perform pairwise comparisons
pairwise_results <- contrast(emmeans_results, method = "pairwise")
# Display the results
summary(pairwise_results)
#bonferroni
pwc <- pairs(emmeans_results, adjust = "bon")
pwc
#p_load(performance)
check_model(m_anova)
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(novelty_cond, aes(x = Week, y = novelty_preference_relative)) +
geom_beeswarm(data = novelty_cond, size = 2.5, aes(color = ID)) +
ylab("Novelty Preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 1.3,
annotations = c("1.0000")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1.15,
annotations = c("0.1474")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1,
annotations = c("0.4312")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = novelty_cond, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
# Filter out so data is only for the first two weeks
TwoWeeks_df <- df %>% filter(Week == "Preinduction" | Week == "1st week post induction")
# Determine the weeks each participant should have
required_weeks <- TwoWeeks_df %>%
distinct(Week) %>%
pull()
# Count the number of weeks each participant has data for
participant_week_counts <- TwoWeeks_df %>%
group_by(ID) %>%
summarize(week_count = n_distinct(Week))
# Identify participants with data for all required weeks
complete_participants <- participant_week_counts %>%
filter(week_count == length(required_weeks)) %>%
pull(ID)
# Filter the dataset to include only complete participants
df_complete <- TwoWeeks_df %>%
filter(ID %in% complete_participants)
# View the new dataset
head(df_complete)
df_complete$ID <- as.factor(df_complete$ID)
df_complete$Week <- factor(df_complete$Week , levels = c("Preinduction","1st week post induction"))
habituation_cond <-  df_complete %>% filter(Condition == "Hab")
social_cond<-  df_complete %>% filter(Condition == "Social")
novelty_cond<-  df_complete %>% filter(Condition == "Novel")
habituation_cond <- habituation_cond %>% mutate(social_preference_relative=((`In zone SocialZone cumulative s`-`In zone NoveltyZone cumulative s`)/(`In zone NoveltyZone cumulative s`+`In zone SocialZone cumulative s`)))
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(social_cond, aes(x = Week, y = social_preference_relative)) +
geom_beeswarm(data = social_cond, size = 2.5, aes(color = ID)) +
ylab("Social Preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 1.3,
annotations = c("0.1146")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1.15,
annotations = c("0.0147")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1,
annotations = c("0.6073")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = social_cond, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
knitr::opts_chunk$set(echo = TRUE)
# Loading
library(pacman)
p_load(readxl, tidyverse)
p_load(broom, ggsignif, multcomp, emmeans)
# xlsx files
#df <- read_excel("3CT_smaller_zones_multicond_longitudinal_data.xlsx") # multicond body in 5 cm zone,nose in 1 cm zone MAKE SURE TO EDIT THE WRONGLY SIZES 5CM ZONE FOR COHORT 1!!!
#df <- read_excel("3ct_1cm_longitudinal_data.xlsx") # same zones but only nose in 1 cm zone
df <- read_excel("3CT_larger_arena.xlsx") #this fiel for larger arena
df <- df %>% mutate(social_time=(`In zone SocialZone multiCond cumulative s`+df$SocialZoneRound))
df <- df %>% mutate(novel_time=(`In zone NoveltyZone multiCond cumulative s`+df$NoveltyZoneRound))
#df$ID<- as.numeric(df$ID) #Change mouse number from class character to class numeric
df<-df[!(df$ID==224),]
df<-df[!(df$ID==281),]
df<-df[!(df$ID==262),]
# Determine the weeks each participant should have
required_weeks <- df %>%
distinct(Week) %>%
pull()
# Count the number of weeks each participant has data for
participant_week_counts <- df %>%
group_by(ID) %>%
summarize(week_count = n_distinct(Week))
# Identify participants with data for all required weeks
complete_participants <- participant_week_counts %>%
filter(week_count == length(required_weeks)) %>%
pull(ID)
# Filter the dataset to include only complete participants
df_complete <- df %>%
filter(ID %in% complete_participants)
# View the new dataset
head(df_complete)
#habituation_cond <-  df_complete %>% filter(Condition == "Hab")
#social_cond<-  df_complete %>% filter(Condition == "Social")
#novelty_cond<-  df_complete %>% filter(Condition == "Novel")
#use this for LMM approach with full sample size
habituation_cond <-  df %>% filter(Condition == "Hab")
social_cond<-  df %>% filter(Condition == "Social")
novelty_cond<-  df %>% filter(Condition == "Novel")
habituation_cond <- habituation_cond %>% mutate(social_preference_relative=((`In zone SocialZone multiCond cumulative s`-`In zone NoveltyZone multiCond cumulative s`)/(`In zone NoveltyZone multiCond cumulative s`+`In zone SocialZone multiCond cumulative s`)))
social_cond <- social_cond %>% mutate(social_preference_relative=((social_cond$social_time-social_cond$novel_time)/(social_cond$social_time+social_cond$novel_time)))
novelty_cond <- novelty_cond %>% mutate(novelty_preference_relative=((novelty_cond$novel_time-novelty_cond$social_time)/(novelty_cond$novel_time+novelty_cond$social_time)))
# habituation_cond <- habituation_cond %>% mutate(social_preference_relative=((`In zone SocialZone multiCond cumulative s`-`In zone NoveltyZone multiCond cumulative s`)/(`In zone NoveltyZone multiCond cumulative s`+`In zone SocialZone multiCond cumulative s`)))
#
#
#
# social_cond <- social_cond %>% mutate(social_preference_relative=((`In zone SocialZone multiCond cumulative s`-`In zone NoveltyZone multiCond cumulative s`)/(`In zone NoveltyZone multiCond cumulative s`+`In zone SocialZone multiCond cumulative s`)))
#
# novelty_cond <- novelty_cond %>% mutate(novelty_preference_relative=((`In zone NoveltyZone multiCond cumulative s`-`In zone SocialZone multiCond cumulative s`)/(`In zone SocialZone multiCond cumulative s`+`In zone NoveltyZone multiCond cumulative s`)))
social_cond$ID <- as.factor(social_cond$ID)
p_load(rstatix)
#outliers - 1
social_cond %>%
group_by(Week) %>%
identify_outliers(social_preference_relative)
#normality - holds
social_cond %>%
group_by(Week) %>%
shapiro_test(social_preference_relative)
by(social_cond$social_preference_relative, social_cond$Week, shapiro.test)
#sphericity - similar to the homogeneity of variance in between-group anova)
#sphericity not broken
anova_test(data = social_cond, dv = social_preference_relative, wid = ID, within = Week)
#F Indicates that we are comparing to an F-distribution (F-test); (2, 18) indicates the degrees of freedom in the numerator (DFn) and the denominator (DFd), respectively; 55.5 indicates the obtained F-statistic value
#p specifies the p-value
#ges is the generalized effect size (amount of variability due to the within-subjects factor)
p_load(afex)
social_cond$ID <- as.factor(social_cond$ID)
social_cond$Week <- factor(social_cond$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
aov_anova <- aov_car(social_preference_relative ~ Week+ Error(ID /Week), data=social_cond)
summary(aov_anova)
#post-hoc
p_load(emmeans)
ph<-emmeans(aov_anova, pairwise ~ Week, conf.level = 0.95)
ph
confint(ph)  #for confidence intervals
test(ph) # for p values
#bonfferoni
posthoc_bonf <- emmeans(aov_anova, pairwise ~ Week, adjust = "bonferroni")
summary(posthoc_bonf)
p_load(performance)
check_model(aov_anova)
#friedman.test(y = social_cond$social_preference_relative, groups = social_cond$Week, blocks = social_cond$ID)
#p_load(pgirmess)
#friedmanmc(as.matrix(dietData))
#res.fried <- friedman_test(social_cond$social_preference_relative ~ social_cond$Week |social_cond$ID)
#pwc <- social_cond %>%
# wilcox_test(social_preference_relative ~ Week, paired = TRUE, p.adjust.method = #"bonferroni")
#pwc
#dunnTest(social_preference_relative ~ Week, data =social_cond,paired = TRUE,
#             method="bh")
#pairwise.wilcox.test(ReplicateAverages$positive_N, ReplicateAverages$section,
#                p.adjust.method = "BH")
#cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(social_cond, aes(x = Week, y = social_preference_relative)) +
geom_beeswarm(data = social_cond, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
# scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("social_preference_relative") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 1.3,
annotations = c("ns")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1.15,
annotations = c("ns")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = social_cond, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
novelty_cond$ID <- as.factor(novelty_cond$ID)
p_load(rstatix)
#outliers - 2
novelty_cond %>%
group_by(Week) %>%
identify_outliers(novelty_preference_relative)
#normality - holds
novelty_cond %>%
group_by(Week) %>%
shapiro_test(novelty_preference_relative)
by(novelty_cond$novelty_preference_relative, novelty_cond$Week, shapiro.test)
#sphericity - similar to the homogeneity of variance in between-group anova)
#sphericity not broken
anova_test(data = novelty_cond, dv = novelty_preference_relative, wid = ID, within = Week)
#F Indicates that we are comparing to an F-distribution (F-test); (2, 18) indicates the degrees of freedom in the numerator (DFn) and the denominator (DFd), respectively; 55.5 indicates the obtained F-statistic valuef
#p specifies the p-value
#ges is the generalized effect size (amount of variability due to the within-subjects factor)
novelty_cond$ID <- as.factor(novelty_cond$ID)
novelty_cond$Week <- factor(novelty_cond$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
aov_anova <- aov_car(novelty_preference_relative ~ Week+ Error(ID /Week), data=novelty_cond)
summary(aov_anova)
#post-hoc
p_load(emmeans)
ph<-emmeans(aov_anova, pairwise ~ Week, conf.level = 0.95)
ph
confint(ph)  #for confidence intervals
test(ph) # for p values
p_load(performance)
check_model(aov_anova)
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(novelty_cond, aes(x = Week, y = novelty_preference_relative)) +
geom_beeswarm(data = novelty_cond, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("novelty_preference_relative") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 1.2,
annotations = c("ns")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1.1,
annotations = c("ns")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = novelty_cond, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
social_cond$Week <- factor(social_cond$Week, levels = c("Preinduction","1st week post induction","2nd week post induction"))
#creating a linear model of the same variables as included in the anova
m_anova <-lmer(social_preference_relative ~  Week + (1|ID), data=social_cond)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova,pairwise ~ Week, conf.level = 0.95)
emmeans_results
class(emmeans_results)
emm_single <- emmeans_results[[1]]  # Extract the first emmGrid object
class(emm_single)
pairwise_results <- contrast(emm_single, method = "pairwise")
class(pairwise_results)
#pairwise_results <- lapply(emmeans_results, contrast, method = "pairwise")
# Perform pairwise comparisons
#pairwise_results <- contrast(emmeans_results, method = "pairwise")
# Display the results
summary(pairwise_results)
#bonferroni
#pwc <- pairs(emmeans_results, adjust = "bon")
#pwc
pwc <- contrast(emm_single, method = "pairwise", adjust = "bon")
summary(pwc)
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(social_cond, aes(x = Week, y = social_preference_relative)) +
geom_beeswarm(data = social_cond, size = 2.5, aes(color = ID)) +
ylab("Social Preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 1.3,
annotations = c("0.1146")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1.15,
annotations = c("0.0147")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1,
annotations = c("0.6073")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = social_cond, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
novelty_cond$ID <- as.factor(novelty_cond$ID)
novelty_cond$Week <- factor(novelty_cond$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
aov_anova <- aov_car(novelty_preference_relative ~ Week+ Error(ID /Week), data=novelty_cond)
summary(aov_anova)
#post-hoc
p_load(emmeans)
ph<-emmeans(aov_anova, pairwise ~ Week, conf.level = 0.95)
ph
confint(ph)  #for confidence intervals
test(ph) # for p values
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
novelty_cond$Week <- factor(novelty_cond$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
#creating a linear model of the same variables as included in the anova
m_anova <-lmer(novelty_preference_relative ~  Week + (1|ID), data=novelty_cond)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova, ~ Week)
# Perform pairwise comparisons
pairwise_results <- contrast(emmeans_results, method = "pairwise")
# Display the results
summary(pairwise_results)
#bonferroni
pwc <- pairs(emmeans_results, adjust = "bon")
pwc
#p_load(performance)
check_model(m_anova)
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(novelty_cond, aes(x = Week, y = novelty_preference_relative)) +
geom_beeswarm(data = novelty_cond, size = 2.5, aes(color = ID)) +
ylab("Novelty Preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 1.3,
annotations = c("0.5983")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1.15,
annotations = c("0.2811")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1,
annotations = c("1.0000")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = novelty_cond, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
# Filter out so data is only for the first two weeks
TwoWeeks_df <- df %>% filter(Week == "Preinduction" | Week == "1st week post induction")
# Determine the weeks each participant should have
required_weeks <- TwoWeeks_df %>%
distinct(Week) %>%
pull()
# Count the number of weeks each participant has data for
participant_week_counts <- TwoWeeks_df %>%
group_by(ID) %>%
summarize(week_count = n_distinct(Week))
# Identify participants with data for all required weeks
complete_participants <- participant_week_counts %>%
filter(week_count == length(required_weeks)) %>%
pull(ID)
# Filter the dataset to include only complete participants
df_complete <- TwoWeeks_df %>%
filter(ID %in% complete_participants)
# View the new dataset
head(df_complete)
df_complete$ID <- as.factor(df_complete$ID)
df_complete$Week <- factor(df_complete$Week , levels = c("Preinduction","1st week post induction"))
habituation_cond <-  df_complete %>% filter(Condition == "Hab")
social_cond<-  df_complete %>% filter(Condition == "Social")
novelty_cond<-  df_complete %>% filter(Condition == "Novel")
habituation_cond <- habituation_cond %>% mutate(social_preference_relative=((`In zone SocialZone cumulative s`-`In zone NoveltyZone cumulative s`)/(`In zone NoveltyZone cumulative s`+`In zone SocialZone cumulative s`)))
