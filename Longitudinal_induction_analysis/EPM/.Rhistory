map_signif_level = TRUE,
y_position = 35,
annotations = c("ns")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 30,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(df, aes(x = Week, y = dark_preference)) +
geom_beeswarm(data = df, size = 2.5, aes(color = ID)) +
ylab("Darkness preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 120,
annotations = c("0.7145")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 115,
annotations = c(" 0.4369")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 110,
annotations = c("0.0561")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
#1. normality of residuals
# Fit the model
m_anova <- lmer(periphery_preference ~ Week + (1|ID), data = df, na.action = na.omit)
ggplot(df, aes(x = Week, y = light_preference)) +
geom_beeswarm(data = df, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("light_preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 40,
annotations = c("0.1740")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 35,
annotations = c("0.0794")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 30,
annotations = c("0.0009")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
knitr::opts_chunk$set(echo = TRUE)
# Loading
library(pacman)
p_load(readxl, tidyverse)
p_load(broom, ggsignif, multcomp, emmeans, DescTools)
pacman::p_load(readxl)
# xlsx files
df <- read_excel("OFT_longitudinal_data.xlsx")
#df$ID<- as.numeric(df$ID) #Change mouse number from class character to class numeric
df<-df[!(df$ID==224),]
# divide by time not spent moving
df<-  df %>% mutate(relative_time_moving=(df$`Movement cumulative s`/(df$`Time not moving cumulative s`+df$`Movement cumulative s`))*100)
df$distance <- df$`Distance moved cm`
df<-  df %>% mutate(periphery_preference=(`In zone periphery cumulative s`/(`In zone Center cumulative s`+`In zone periphery cumulative s`)*100))
# Determine the weeks each participant should have
required_weeks <- df %>%
distinct(Week) %>%
pull()
# Count the number of weeks each participant has data for
participant_week_counts <- df %>%
group_by(ID) %>%
summarize(week_count = n_distinct(Week))
# Identify participants with data for all required weeks
complete_participants <- participant_week_counts %>%
filter(week_count == length(required_weeks)) %>%
pull(ID)
# Filter the dataset to include only complete participants
df_complete <- df %>%
filter(ID %in% complete_participants)
# View the new dataset
head(df_complete)
df_complete$ID <- as.factor(df_complete$ID)
df_complete$distance <- df_complete$`Distance moved cm`
p_load(rstatix)
#outliers - 3
df_complete %>%
group_by(Week) %>%
identify_outliers(distance)
#normality - holds
df_complete %>%
group_by(Week) %>%
shapiro_test(distance)
by(df_complete$distance, df_complete$Week, shapiro.test)
#sphericity - similar to the homogeneity of variance in between-group anova)
anova_test(data = df_complete, dv = distance, wid = ID, within = Week)
#F Indicates that we are comparing to an F-distribution (F-test); (2, 18) indicates the degrees of freedom in the numerator (DFn) and the denominator (DFd), respectively; 55.5 indicates the obtained F-statistic value
#p specifies the p-value
#ges is the generalized effect size (amount of variability due to the within-subjects factor)
df_complete$ID <- as.factor(df_complete$ID)
df_complete$distance <- df_complete$`Distance moved cm`
df_complete$Week <- factor(df_complete$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
#for getting an anova object that can be used for post-hoc
p_load(afex)
aov_anova <- aov_car(distance ~ Week+ Error(ID /Week), data=df_complete)
summary(aov_anova)
#post-hoc
p_load(emmeans)
ph<-emmeans(aov_anova, pairwise ~ Week, conf.level = 0.95, adjust = "tukey")
ph
confint(ph)  #for confidence intervals
test(ph) # for p values
#bonfferoni
posthoc_bonf <- emmeans(aov_anova, pairwise ~ Week, adjust = "bonferroni")
summary(posthoc_bonf)
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
df_complete$Week <- factor(df_complete$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
p_load(ggbeeswarm, ggsignif)
ggplot(df_complete, aes(x = Week, y = distance)) +
geom_beeswarm(data = df_complete, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("Distance (cm)") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 8800,
annotations = c("ns")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 8400,
annotations = c("*")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 8000,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df_complete, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
#creating a linear model of the same variables as included in the anova
m_anova <- lmer(distance ~ Week + (1 | ID), data = df)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova, ~ Week)
# Perform pairwise comparisons
pairwise_results <- contrast(emmeans_results, method = "pairwise", adjust = "tukey")
# Display the results
summary(pairwise_results)
#bonferroni
pwc <- pairs(emmeans_results, adjust = "bon")
pwc
qqnorm(res <- residuals(m_anova))
library(lme4)
library(simr)
effect_size <- 0.3
alpha <- 0.05
power <- 0.80
design <- lme4::lmer(distance ~ Week + (1 | ID), data = df)
# Calculate power
power_analysis <- powerSim(design, nsim = 1000)
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
#creating a linear model of the same variables as included in the anova
m_anova <- lmer(distance ~ Week + (1 | ID), data = df)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova, ~ Week)
# Perform pairwise comparisons
pairwise_results <- contrast(emmeans_results, method = "pairwise", adjust = "tukey")
# Display the results
summary(pairwise_results)
#bonferroni
pwc <- pairs(emmeans_results, adjust = "bon")
pwc
#qqnorm(res <- residuals(m_anova))
df$Week <- factor(df$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
p_load(ggbeeswarm, ggsignif)
ggplot(df, aes(x = Week, y = distance)) +
geom_beeswarm(data = df, size = 2.5, aes(color = ID)) +
ylab("Distance (cm)") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 9000,
annotations = c("0.2440")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 8500,
annotations = c("0.0002")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 8000,
annotations = c("0.0185")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df_complete, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
#creating a linear model of the same variables as included in the anova
m_anova <-lmer(periphery_preference ~  Week + (1|ID), data=df)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova, ~ Week)
# Perform pairwise comparisons
pairwise_results <- contrast(emmeans_results, method = "pairwise")
# Display the results
summary(pairwise_results)
#bonferroni
pwc <- pairs(emmeans_results, adjust = "bon")
pwc
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(df, aes(x = Week, y = periphery_preference)) +
geom_beeswarm(data = df, size = 2.5, aes(color = ID)) +
ylab("Periphery Preference %") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 110,
annotations = c("0.0003")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 105,
annotations = c("<.0001")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 100,
annotations = c("0.5489")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
knitr::opts_chunk$set(echo = TRUE)
#setwd("~/Documents/TDP control files/Longitudinal induction analysis/LDCT/")
# Loading
library(pacman)
p_load(readxl, tidyverse)
p_load(broom, ggsignif, multcomp, emmeans)
# xlsx files
df <- read_excel("LDCT_longitudinal.xlsx")
#df$ID<- as.numeric(df$ID) #Change mouse number from class character to class numeric
df<-df[!(df$ID==224),]
#light preference
df<-  df %>% mutate(time_light=df$`In zone light cumulative s`)
df<-  df %>% mutate(time_dark=600-df$`In zone light cumulative s`)
#relative time spent in dark over light
df<-  df %>% mutate(light_preference=(time_light/(time_light+time_dark))*100)
df<-  df %>% mutate(dark_preference=(time_dark/(time_light+time_dark))*100)
# Determine the weeks each participant should have
required_weeks <- df %>%
distinct(Week) %>%
pull()
# Count the number of weeks each participant has data for
participant_week_counts <- df %>%
group_by(ID) %>%
summarize(week_count = n_distinct(Week))
# Identify participants with data for all required weeks
complete_participants <- participant_week_counts %>%
filter(week_count == length(required_weeks)) %>%
pull(ID)
# Filter the dataset to include only complete participants
df_complete <- df %>%
filter(ID %in% complete_participants)
# View the new dataset
head(df_complete)
#assumption checks
p_load(rstatix)
df_complete %>%
group_by(Week) %>%
identify_outliers(light_preference)
by(df_complete$dark_preference, df_complete$Week, shapiro.test)
# Subset data for the two conditions
preinduction <- df_complete %>% filter(Week == "Preinduction")
postinduction <- df_complete %>% filter(Week == "1st week post induction")
# Perform paired t-test
t_test_result <- t.test(preinduction$dark_preference, postinduction$dark_preference, paired = TRUE)
print(t_test_result)
df_complete$Week <- factor(df_complete$Week , levels = c("Preinduction","1st week post induction"))
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(df_complete, aes(x = Week, y = dark_preference)) +
geom_beeswarm(data = df_complete, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("dark_preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 60,
annotations = c("***")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df_complete, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
df$Week <- factor(df$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
#creating a linear model of the same variables as included in the anova
m_anova <-lmer(dark_preference ~  Week + (1|ID), data=df)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova, ~ Week)
emmeans_results
# Perform pairwise comparisons
pairwise_results <- contrast(emmeans_results, method = "pairwise")
# Display the results
summary(pairwise_results)
#bonferroni
pwc <- pairs(emmeans_results, adjust = "bon")
pwc
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(df, aes(x = Week, y = dark_preference)) +
geom_beeswarm(data = df, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("dark_preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 80,
annotations = c("0.0032")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(df, aes(x = Week, y = dark_preference)) +
geom_beeswarm(data = df, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("dark_preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 80,
annotations = c("0.1140")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
knitr::opts_chunk$set(echo = TRUE)
#setwd("~/Documents/TDP control files/Longitudinal induction analysis/LDCT/")
# Loading
library(pacman)
p_load(readxl, tidyverse)
p_load(broom, ggsignif, multcomp, emmeans)
# xlsx files
df <- read_excel("LDCT_longitudinal.xlsx")
#df$ID<- as.numeric(df$ID) #Change mouse number from class character to class numeric
df<-df[!(df$ID==224),]
#light preference
df<-  df %>% mutate(time_light=df$`In zone light cumulative s`)
df<-  df %>% mutate(time_dark=600-df$`In zone light cumulative s`)
#relative time spent in dark over light
df<-  df %>% mutate(light_preference=(time_light/(time_light+time_dark))*100)
df<-  df %>% mutate(dark_preference=(time_dark/(time_light+time_dark))*100)
# Determine the weeks each participant should have
required_weeks <- df %>%
distinct(Week) %>%
pull()
# Count the number of weeks each participant has data for
participant_week_counts <- df %>%
group_by(ID) %>%
summarize(week_count = n_distinct(Week))
# Identify participants with data for all required weeks
complete_participants <- participant_week_counts %>%
filter(week_count == length(required_weeks)) %>%
pull(ID)
# Filter the dataset to include only complete participants
df_complete <- df %>%
filter(ID %in% complete_participants)
# View the new dataset
head(df_complete)
#assumption checks
p_load(rstatix)
df_complete %>%
group_by(Week) %>%
identify_outliers(light_preference)
by(df_complete$dark_preference, df_complete$Week, shapiro.test)
# Subset data for the two conditions
preinduction <- df_complete %>% filter(Week == "Preinduction")
postinduction <- df_complete %>% filter(Week == "1st week post induction")
# Perform paired t-test
t_test_result <- t.test(preinduction$dark_preference, postinduction$dark_preference, paired = TRUE)
print(t_test_result)
df_complete$Week <- factor(df_complete$Week , levels = c("Preinduction","1st week post induction"))
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(df_complete, aes(x = Week, y = dark_preference)) +
geom_beeswarm(data = df_complete, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("dark_preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 60,
annotations = c("***")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df_complete, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
df$Week <- factor(df$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
#creating a linear model of the same variables as included in the anova
m_anova <-lmer(dark_preference ~  Week + (1|ID), data=df)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova, ~ Week)
emmeans_results
# Perform pairwise comparisons
pairwise_results <- contrast(emmeans_results, method = "pairwise")
# Display the results
summary(pairwise_results)
#bonferroni
pwc <- pairs(emmeans_results, adjust = "bon")
pwc
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(df, aes(x = Week, y = dark_preference)) +
geom_beeswarm(data = df, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("dark_preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 80,
annotations = c("0.1140")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(df, aes(x = Week, y = dark_preference)) +
geom_beeswarm(data = df, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("dark_preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 80,
annotations = c("0.4365")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 80,
annotations = c("0.2976")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 80,
annotations = c("1.0000")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
ggplot(df, aes(x = Week, y = dark_preference)) +
geom_beeswarm(data = df, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("dark_preference") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 80,
annotations = c("0.4365")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 90,
annotations = c("0.2976")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 100,
annotations = c("1.0000")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
