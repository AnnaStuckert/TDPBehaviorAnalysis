ph
confint(ph)  #for confidence intervals
test(ph) # for p values
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
#creating a linear model of the same variables as included in the anova
m_anova <-lmer(novelty_preference_relative ~  Week + (1|ID), data=novelty_cond)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova, ~ Week)
# Perform pairwise comparisons
pairwise_results <- contrast(emmeans_results, method = "pairwise")
# Display the results
summary(pairwise_results)
#bonferroni
pwc <- pairs(emmeans_results, adjust = "bon")
pwc
#p_load(performance)
check_model(m_anova)
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(novelty_cond, aes(x = Week, y = novelty_preference_relative)) +
geom_beeswarm(data = novelty_cond, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("novelty_preference_relative") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 1.2,
annotations = c("ns")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1.1,
annotations = c("ns")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 1,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = novelty_cond, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
# Filter out so data is only for the first two weeks
TwoWeeks_df <- df %>% filter(Week == "Preinduction" | Week == "1st week post induction")
# Determine the weeks each participant should have
required_weeks <- TwoWeeks_df %>%
distinct(Week) %>%
pull()
# Count the number of weeks each participant has data for
participant_week_counts <- TwoWeeks_df %>%
group_by(ID) %>%
summarize(week_count = n_distinct(Week))
# Identify participants with data for all required weeks
complete_participants <- participant_week_counts %>%
filter(week_count == length(required_weeks)) %>%
pull(ID)
# Filter the dataset to include only complete participants
df_complete <- TwoWeeks_df %>%
filter(ID %in% complete_participants)
# View the new dataset
head(df_complete)
df_complete$ID <- as.factor(df_complete$ID)
df_complete$Week <- factor(df_complete$Week , levels = c("Preinduction","1st week post induction"))
habituation_cond <-  df_complete %>% filter(Condition == "Hab")
social_cond<-  df_complete %>% filter(Condition == "Social")
novelty_cond<-  df_complete %>% filter(Condition == "Novel")
habituation_cond <- habituation_cond %>% mutate(social_preference_relative=((`In zone SocialZone cumulative s`-`In zone NoveltyZone cumulative s`)/(`In zone NoveltyZone cumulative s`+`In zone SocialZone cumulative s`)))
knitr::opts_chunk$set(echo = TRUE)
#setwd("~/Documents/TDP control files/Longitudinal induction analysis/LDCT/")
# Loading
library(pacman)
p_load(readxl, tidyverse)
p_load(broom, ggsignif, multcomp, emmeans)
# xlsx files
df <- read_excel("LDCT_longitudinal_binned.xlsx")
#light preference
df<-  df %>% mutate(time_light=df$`In zone light cumulative s`)
df<-  df %>% mutate(time_dark=600-df$`In zone light cumulative s`)
#relative time spent in dark over light
df<-  df %>% mutate(light_preference=(time_light/(time_light+time_dark))*100)
# Determine the weeks each participant should have
required_weeks <- df %>%
distinct(Week) %>%
pull()
# Count the number of weeks each participant has data for
participant_week_counts <- df %>%
group_by(ID) %>%
summarize(week_count = n_distinct(Week))
# Identify participants with data for all required weeks
complete_participants <- participant_week_counts %>%
filter(week_count == length(required_weeks)) %>%
pull(ID)
# Filter the dataset to include only complete participants
df_complete <- df %>%
filter(ID %in% complete_participants)
# View the new dataset
head(df_complete)
df$Week <- factor(df$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
model <- lmer(light_preference ~ Week*Timebin + (1 | ID), data = df)
#Compare First vs. Last 5 Minutes within Each Week
emmeans(model, pairwise ~ Timebin | Week, adjust = "bonferroni")
#Compare Distance Moved Across Weeks for Each Trial Period
emmeans(model, pairwise ~ Week | Timebin, adjust = "bonferroni")
#plot(emmeans(model, ~ Week * Timebin))
#p_load(performance)
check_model(model)
# Ensure 'Week' and 'timebin' are factors with appropriate levels
df$Timebin <- as.factor(df$Timebin)
class(df$Timebin)
#df$Timebin <- factor(df$Timebin, levels = c("Timebin 1", "Timebin 2"))
# Load required packages
p_load(ggbeeswarm, ggsignif)
# Create the plot
ggplot(df, aes(x = interaction(Week, Timebin), y = light_preference)) +
geom_beeswarm(size = 2.5, aes(color = ID)) +
ylab("Light preference") +
xlab("Timepoint") +
# Add significance comparisons
geom_signif(comparisons = list(c("Preinduction.Timebin 1", "1st week post induction.Timebin 1")),
map_signif_level = TRUE,
y_position = 40,
annotations = c("0.0164")) +
geom_signif(comparisons = list(c("Preinduction.Timebin 2", "1st week post induction.Timebin 2")),
map_signif_level = TRUE,
y_position = 40,
annotations = c("0.0906")) +
# Add mean and error bars
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(stat = "summary", fun.data = mean_se, width = 0.1, position = position_dodge(width = 0.75)) +
# Improve theme
theme(text = element_text(size = 13),
axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 55)
# Ensure 'Week' and 'Timebin' are factors
df$Week <- factor(df$Week, levels = c("Preinduction", "1st week post induction", "2nd week post induction"))
df$Timebin <- factor(df$Timebin, levels = c("Timebin 1", "Timebin 2"))
# Load required packages
p_load(ggbeeswarm, ggsignif)
# Create the plot
ggplot(df, aes(x = interaction(Timebin, Week, sep = " "), y = light_preference)) +
geom_beeswarm(size = 2.5, aes(color = ID)) +
ylab("Light preference") +
xlab("Timepoint") +
# Add significance comparisons
geom_signif(comparisons = list(c("Timebin 1 Preinduction", "Timebin 2 Preinduction")),
map_signif_level = TRUE,
y_position = 30,
annotations = c("0.1377")) +
geom_signif(comparisons = list(c("Timebin 1 1st week post induction", "Timebin 2 1st week post induction")),
map_signif_level = TRUE,
y_position = 40,
annotations = c("0.7341")) +
# Add mean and error bars
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5, position = position_dodge(width = 0.75)) +
geom_errorbar(stat = "summary", fun.data = mean_se, width = 0.1, position = position_dodge(width = 0.75)) +
# Improve theme
theme(text = element_text(size = 13),
axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 55)
# Create the plot
ggplot(df, aes(x = interaction(Timebin, Week, sep = " "), y = light_preference)) +
geom_beeswarm(size = 2.5, aes(color = ID)) +
ylab("Light preference") +
xlab("Timepoint") +
# Add significance comparisons
geom_signif(comparisons = list(c("Timebin 1 Preinduction", "Timebin 2 Preinduction")),
map_signif_level = TRUE,
y_position = 30,
annotations = c("0.1377")) +
geom_signif(comparisons = list(c("Timebin 1 1st week post induction", "Timebin 2 1st week post induction")),
map_signif_level = TRUE,
y_position = 40,
annotations = c("0.7341")) +
# Add mean and error bars
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5, position = position_dodge(width = 0.75)) +
geom_errorbar(stat = "summary", fun.data = mean_se, width = 0.1, position = position_dodge(width = 0.75)) +
# Improve theme
theme(text = element_text(size = 13),
axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 55)
ggplot(df, aes(x = interaction(Week, Timebin), y = light_preference)) +
geom_beeswarm(size = 2.5, aes(color = ID)) +
ylab("Light preference") +
xlab("Timepoint") +
# Add significance comparisons
geom_signif(comparisons = list(c("Preinduction.Timebin 1", "1st week post induction.Timebin 1")),
map_signif_level = TRUE,
y_position = 40,
annotations = c("0.0164")) +
geom_signif(comparisons = list(c("Preinduction.Timebin 2", "1st week post induction.Timebin 2")),
map_signif_level = TRUE,
y_position = 40,
annotations = c("0.0906")) +
# Add mean and error bars
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(stat = "summary", fun.data = mean_se, width = 0.1, position = position_dodge(width = 0.75)) +
# Improve theme
theme(text = element_text(size = 13),
axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 55)
ggplot(df2, aes(x = Week, y = DR_index)) +
geom_beeswarm(data = df2, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("DR_index") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 120,
annotations = c("0.0499")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 110,
annotations = c("ns")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 100,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df2, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
knitr::opts_chunk$set(echo = TRUE)
#setwd("~/Documents/TDP control files/Longitudinal induction analysis/NOR/")
# Loading
library(pacman)
p_load(readxl, tidyverse)
p_load(broom, ggsignif, multcomp, emmeans, DescTools)
# xlsx files
df <- read_excel("NOR_smaller_zone_longitudinal_data.xlsx")
# Determine the weeks each participant should have
required_weeks <- df %>%
distinct(Week) %>%
pull()
# Count the number of weeks each participant has data for
participant_week_counts <- df %>%
group_by(ID) %>%
summarize(week_count = n_distinct(Week))
# Identify participants with data for all required weeks
complete_participants <- participant_week_counts %>%
filter(week_count == length(required_weeks)) %>%
pull(ID)
# Filter the dataset to include only complete participants
df_complete <- df %>%
filter(ID %in% complete_participants)
# View the new dataset
head(df_complete)
#Identical_cond <-  df_complete %>% filter(Condition == "Hab")
#Novel_cond<-  df_complete %>% filter(Condition == "NovRGHT"| Condition =="NovLFT")
Novel_left <-  df_complete %>% filter(Condition =="NovLFT")
Novel_right<-  df_complete %>% filter(Condition == "NovRGHT")
#use this for full sample in df2 instead, for LMM approach
#Novel_left <-  df %>% filter(Condition =="NovLFT")
#Novel_right<-  df %>% filter(Condition == "NovRGHT")
# calculating DR_ index as (time novel  / (time novel + time familiar)*100)
Novel_right<- Novel_right %>% mutate(DR_index=((Novel_right$`In zone ContactZone_right  cumulative s`/(Novel_right$`In zone ContactZone_right  cumulative s`+Novel_right$`In zone ContactZone_left cumulative s`))*100))
Novel_left<- Novel_left %>% mutate(DR_index=((Novel_left$`In zone ContactZone_left cumulative s`/(Novel_left$`In zone ContactZone_left cumulative s`+Novel_left$`In zone ContactZone_right  cumulative s`))*100))
df2 <- rbind(Novel_left,Novel_right)
df2$ID <- as.factor(df2$ID)
df2$Week <- factor(df2$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
#for getting an anova object that can be used for post-hoc
p_load(afex)
aov_anova <- aov_car(DR_index ~ Week+ Error(ID /Week), data=df2)
summary(aov_anova)
#post-hoc
p_load(emmeans)
ph<-emmeans(aov_anova, pairwise ~ Week, conf.level = 0.95)
ph
confint(ph)  #for confidence intervals
test(ph) # for p values
#p_load(performance)
check_model(aov_anova)
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(df2, aes(x = Week, y = DR_index)) +
geom_beeswarm(data = df2, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("DR_index") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 120,
annotations = c("0.0499")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 110,
annotations = c("ns")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 100,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df2, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
#creating a linear model of the same variables as included in the anova
m_anova <-lmer(DR_index ~  Week + (1|ID), data=df2)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova, ~ Week)
# Perform pairwise comparisons
pairwise_results <- contrast(emmeans_results, method = "pairwise")
# Display the results
summary(pairwise_results)
#bonferroni
pwc <- pairs(emmeans_results, adjust = "bon")
pwc
#p_load(performance)
check_model(m_anova)
#1. normality of residuals
# Fit the model
#m_anova <- lmer(periphery_preference ~ Week + (1|ID), data = df, na.action = na.omit)
# Extract residuals
residuals <- residuals(m_anova)
# Q-Q plot for normality
qqnorm(residuals)
qqline(residuals)
#2. homoscedasticity (the same as homogeneity of variance)
# Residuals vs Fitted plot
plot(fitted(m_anova), residuals)
abline(h = 0, col = "red")
#3. Independence of Residuals
#Since this is a repeated measures design, you have accounted for within-subject correlation by including random effects. Ensure that there are no obvious patterns in the residuals versus time.
#4 Random Effects Structure:
#The random effects (e.g., intercepts and slopes for each subject) should be normally distributed. This can be checked by examining the distribution of the random effects.
# Extract random effects
ranef(m_anova)
# Check distribution of random effects
qqnorm(ranef(m_anova)$ID[,1])
qqline(ranef(m_anova)$ID[,1])
#5 Linearity:
#The relationship between the predictor variables and the response variable should be linear. This can be assessed by plotting the fitted values against the predictor variables.
# Plot fitted values vs predictors
plot(df$Week, fitted(m_anova))
ggplot(df2, aes(x = Week, y = DR_index)) +
geom_beeswarm(data = df2, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("DR_index") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 120,
annotations = c("0.0499")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 110,
annotations = c("ns")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 100,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df2, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 9))
knitr::opts_chunk$set(echo = TRUE)
#setwd("~/Documents/TDP control files/Longitudinal induction analysis/NOR/")
# Loading
library(pacman)
p_load(readxl, tidyverse)
p_load(broom, ggsignif, multcomp, emmeans, DescTools)
# xlsx files
df <- read_excel("NOR_smaller_zone_multicond_longitudinal_data.xlsx")
# Determine the weeks each participant should have
required_weeks <- df %>%
distinct(Week) %>%
pull()
# Count the number of weeks each participant has data for
participant_week_counts <- df %>%
group_by(ID) %>%
summarize(week_count = n_distinct(Week))
# Identify participants with data for all required weeks
complete_participants <- participant_week_counts %>%
filter(week_count == length(required_weeks)) %>%
pull(ID)
# Filter the dataset to include only complete participants
df_complete <- df %>%
filter(ID %in% complete_participants)
# View the new dataset
head(df_complete)
#Identical_cond <-  df_complete %>% filter(Condition == "Hab")
#Novel_cond<-  df_complete %>% filter(Condition == "NovRGHT"| Condition =="NovLFT")
Novel_left <-  df_complete %>% filter(Condition =="NovLFT")
Novel_right<-  df_complete %>% filter(Condition == "NovRGHT")
#use this for full sample in df2 instead, for LMM approach
#Novel_left <-  df %>% filter(Condition =="NovLFT")
#Novel_right<-  df %>% filter(Condition == "NovRGHT")
# calculating DR_ index as (time novel  / (time novel + time familiar)*100)
Novel_right<- Novel_right %>% mutate(DR_index=((Novel_right$`In zone ContactZone_right  cumulative s`/(Novel_right$`In zone ContactZone_right  cumulative s`+Novel_right$`In zone ContactZone_left cumulative s`))*100))
Novel_left<- Novel_left %>% mutate(DR_index=((Novel_left$`In zone ContactZone_left cumulative s`/(Novel_left$`In zone ContactZone_left cumulative s`+Novel_left$`In zone ContactZone_right  cumulative s`))*100))
df2 <- rbind(Novel_left,Novel_right)
df2$ID <- as.factor(df2$ID)
df2$Week <- factor(df2$Week , levels = c("Preinduction","1st week post induction","2nd week post induction"))
#for getting an anova object that can be used for post-hoc
p_load(afex)
aov_anova <- aov_car(DR_index ~ Week+ Error(ID /Week), data=df2)
summary(aov_anova)
#post-hoc
p_load(emmeans)
ph<-emmeans(aov_anova, pairwise ~ Week, conf.level = 0.95)
ph
confint(ph)  #for confidence intervals
test(ph) # for p values
#p_load(performance)
check_model(aov_anova)
cbbPalette <- c("#fcfdbf", "#feca8d", "#D67236", "#f1605d", "#9e2f7f", "#440f76")
p_load(ggbeeswarm, ggsignif)
ggplot(df2, aes(x = Week, y = DR_index)) +
geom_beeswarm(data = df2, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("DR_index") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 120,
annotations = c("0.0499")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 110,
annotations = c("ns")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 100,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df2, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 13))
#Loading packages for linear mixed effects modelling
library(lmerTest)
library(lme4)
#creating a linear model of the same variables as included in the anova
m_anova <-lmer(DR_index ~  Week + (1|ID), data=df2)
summary(m_anova)
# Obtain estimated marginal means
emmeans_results <- emmeans(m_anova, ~ Week)
# Perform pairwise comparisons
pairwise_results <- contrast(emmeans_results, method = "pairwise")
# Display the results
summary(pairwise_results)
#bonferroni
pwc <- pairs(emmeans_results, adjust = "bon")
pwc
#p_load(performance)
check_model(m_anova)
#1. normality of residuals
# Fit the model
#m_anova <- lmer(periphery_preference ~ Week + (1|ID), data = df, na.action = na.omit)
# Extract residuals
residuals <- residuals(m_anova)
# Q-Q plot for normality
qqnorm(residuals)
qqline(residuals)
#2. homoscedasticity (the same as homogeneity of variance)
# Residuals vs Fitted plot
plot(fitted(m_anova), residuals)
abline(h = 0, col = "red")
#3. Independence of Residuals
#Since this is a repeated measures design, you have accounted for within-subject correlation by including random effects. Ensure that there are no obvious patterns in the residuals versus time.
#4 Random Effects Structure:
#The random effects (e.g., intercepts and slopes for each subject) should be normally distributed. This can be checked by examining the distribution of the random effects.
# Extract random effects
ranef(m_anova)
# Check distribution of random effects
qqnorm(ranef(m_anova)$ID[,1])
qqline(ranef(m_anova)$ID[,1])
#5 Linearity:
#The relationship between the predictor variables and the response variable should be linear. This can be assessed by plotting the fitted values against the predictor variables.
# Plot fitted values vs predictors
plot(df$Week, fitted(m_anova))
ggplot(df2, aes(x = Week, y = DR_index)) +
geom_beeswarm(data = df2, size = 2.5, aes(color = ID)) +
#  geom_dotplot(aes(fill = ID, color = ID), binaxis = 'y', binwidth = 1,
#               method = "histodot", stackratio = 1, dotsize = 0.5,
#               stackgroups = TRUE, stackdir = "down", position = position_nudge(x = -.1)) +
#  scale_fill_manual(values = cbbPalette) +
#  scale_colour_manual(values = cbbPalette) +
ylab("DR_index") +
xlab("Timepoint") +
geom_signif(comparisons = list(c("Preinduction", "1st week post induction")),
map_signif_level = TRUE,
y_position = 120,
annotations = c("ns")) +
geom_signif(comparisons = list(c("Preinduction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 110,
annotations = c("ns")) +
geom_signif(comparisons = list(c("1st week post induction", "2nd week post induction")),
map_signif_level = TRUE,
y_position = 100,
annotations = c("ns")) +
geom_crossbar(stat = "summary", fun = mean, width = 0.2, fatten = 1.5) +
geom_errorbar(data = df2, stat = "summary", fun.data = mean_se, width = 0.1, position = "dodge") +
theme(text = element_text(size = 9))
