x = "Week",
y = "Mean Distance (cm)"
) +
theme_minimal() +
theme(legend.position = "none")
# 4. Plot for NO EFFECT group
plot_no_effect <- ggplot(df_no_effect, aes(x = factor(week), y = mean_distance, fill = week)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(
aes(ymin = mean_distance - se_distance, ymax = mean_distance + se_distance),
width = 0.2,
position = position_dodge(0.6)
) +
labs(
title = "Distance Moved Across Weeks (No Effect)",
x = "Week",
y = "Mean Distance (cm)"
) +
theme_minimal() +
theme(legend.position = "none")
# 5. Print plots
print(plot_effect)
print(plot_no_effect)
library(dplyr)
library(ggplot2)
# 1. Summarize the data
df_summary_split <- combined_long %>%
# First, order weeks correctly
mutate(week = factor(week, levels = c("preinduction", "week_post1", "week_post2"))) %>%
group_by(group, week) %>%
summarise(
mean_distance = mean(distance, na.rm = TRUE),
se_distance = sd(distance, na.rm = TRUE) / sqrt(n())
)
# 2. Split data
df_effect <- df_summary_split %>% filter(group == "Effect")
df_no_effect <- df_summary_split %>% filter(group == "No Effect")
# 3. Plot for EFFECT group
plot_effect <- ggplot(df_effect, aes(x = week, y = mean_distance, fill = week)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(
aes(ymin = mean_distance - se_distance, ymax = mean_distance + se_distance),
width = 0.2,
position = position_dodge(0.6)
) +
labs(
title = "Distance Moved Across Weeks (Effect)",
x = "Week",
y = "Mean Distance (cm)"
) +
theme_minimal() +
theme(legend.position = "none")
# 4. Plot for NO EFFECT group
plot_no_effect <- ggplot(df_no_effect, aes(x = week, y = mean_distance, fill = week)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(
aes(ymin = mean_distance - se_distance, ymax = mean_distance + se_distance),
width = 0.2,
position = position_dodge(0.6)
) +
labs(
title = "Distance Moved Across Weeks (No Effect)",
x = "Week",
y = "Mean Distance (cm)"
) +
theme_minimal() +
theme(legend.position = "none")
# 5. Print plots
print(plot_effect)
print(plot_no_effect)
View(df_summary)
library(dplyr)
library(ggplot2)
# 1. Summarize the data
df_summary_split <- combined_long %>%
# First, order weeks correctly
mutate(week = factor(week, levels = c("week_preinduction", "week_post1", "week_post2"))) %>%
group_by(group, week) %>%
summarise(
mean_distance = mean(distance, na.rm = TRUE),
se_distance = sd(distance, na.rm = TRUE) / sqrt(n())
)
# 2. Split data
df_effect <- df_summary_split %>% filter(group == "Effect")
df_no_effect <- df_summary_split %>% filter(group == "No Effect")
# 3. Plot for EFFECT group
plot_effect <- ggplot(df_effect, aes(x = week, y = mean_distance, fill = week)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(
aes(ymin = mean_distance - se_distance, ymax = mean_distance + se_distance),
width = 0.2,
position = position_dodge(0.6)
) +
labs(
title = "Distance Moved Across Weeks (Effect)",
x = "Week",
y = "Mean Distance (cm)"
) +
theme_minimal() +
theme(legend.position = "none")
# 4. Plot for NO EFFECT group
plot_no_effect <- ggplot(df_no_effect, aes(x = week, y = mean_distance, fill = week)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(
aes(ymin = mean_distance - se_distance, ymax = mean_distance + se_distance),
width = 0.2,
position = position_dodge(0.6)
) +
labs(
title = "Distance Moved Across Weeks (No Effect)",
x = "Week",
y = "Mean Distance (cm)"
) +
theme_minimal() +
theme(legend.position = "none")
# 5. Print plots
print(plot_effect)
print(plot_no_effect)
generate_mouse_data <- function(n_mice = 13, seed = 123, effect = TRUE) {
set.seed(seed)
# Mouse-specific random intercepts
mouse_random_intercept <- rnorm(n_mice, mean = 0, sd = 100)  # Bigger variability across mice
# Mouse-specific random slopes (i.e., how much their change over weeks differs)
mouse_random_slope <- rnorm(n_mice, mean = 0, sd = 10)  # Mild variability in progression
# Base means and SDs for each week (your real data)
pre_mean  <- 4682.097
pre_sd    <- 844.2551
week1_mean <- 5136.659
week1_sd   <- 920.0022
week2_mean <- 6197.830
week2_sd   <- 920.0022
# If no effect, keep means similar across weeks
if (!effect) {
week1_mean <- pre_mean
week2_mean <- pre_mean
}
# Create empty lists to store week-by-week data
week_preinduction <- numeric(n_mice)
week_post1 <- numeric(n_mice)
week_post2 <- numeric(n_mice)
for (i in 1:n_mice) {
# Simulate each week for each mouse, adding mouse-specific intercept and slope
week_preinduction[i] <- rnorm(1, pre_mean + mouse_random_intercept[i], pre_sd)
week_post1[i] <- rnorm(1, week1_mean + mouse_random_intercept[i] + mouse_random_slope[i], week1_sd)
week_post2[i] <- rnorm(1, week2_mean + mouse_random_intercept[i] + 2 * mouse_random_slope[i], week2_sd)
# Note: `2 * slope` assumes more time has passed so slope accumulates.
}
# Assemble the dataframe
df <- data.frame(
id = 1:n_mice,
week_preinduction = week_preinduction,
week_post1 = week_post1,
week_post2 = week_post2
)
# Introduce dropout: randomly set Week 3 missing for 2 mice
drop_out <- sample(1:n_mice, 2)
df$week_post2[drop_out] <- NA
return(df)
}
# Loading
library(pacman)
p_load(readxl, tidyverse)
p_load(broom, ggsignif, multcomp, emmeans, DescTools)
pacman::p_load(readxl)
# xlsx files
df <- read_excel("OFT_longitudinal_data.xlsx")
df<-df[!(df$ID==224),]
df<-df[!(df$ID==281),]
df<-df[!(df$ID==262),]
# Load necessary libraries
library(readxl)
library(dplyr)
# Rename column for easier access
df <- df %>%
rename(distance = `Distance moved cm`)
# Group by 'Week' and calculate mean and standard deviation
summary_stats <- df %>%
group_by(Week) %>%
summarise(
mean_distance = mean(distance, na.rm = TRUE),
sd_distance = sd(distance, na.rm = TRUE)
)
# Print results
print(summary_stats)
# Load libraries
library(lme4)
library(dplyr)
# If necessary, reformat week as ordered factor
df <- df %>%
mutate(Week = factor(Week, levels = c("Preinduction", "1st week post induction", "2nd week post induction")))
# Fit a linear mixed-effects model
# Random intercepts and random slopes for each subject (id)
model <- lmer(distance ~ Week + (Week | ID), data = df)
# Fit a linear mixed-effects model
# Random intercepts and random slopes for each subject (id)
model <- lmer(distance ~ Week + (1| ID), data = df)
# View model summary
summary(model)
# Look at estimated subject-level variability (random effects)
ranef(model)  # Random intercepts and slopes per subject
VarCorr(model)  # Variance components
# Fit a linear mixed-effects model
# Random intercepts and random slopes for each subject (id)
model <- lmer(distance ~ Week + (Week| ID), data = df)
# Fit a linear mixed-effects model
# Random intercepts and random slopes for each subject (id)
model <- lmer(distance ~ Week + (1| ID), data = df)
# View model summary
summary(model)
# Look at estimated subject-level variability (random effects)
ranef(model)  # Random intercepts and slopes per subject
VarCorr(model)  # Variance components
# Look at estimated subject-level variability (random effects)
ranef(model)  # Random intercepts and slopes per subject
VarCorr(model)  # Variance components
# Look at estimated subject-level variability (random effects)
ranef(model)  # Random intercepts and slopes per subject
VarCorr(model)  # Variance components
# Look at estimated subject-level variability (random effects)
ranef(model)  # Random intercepts and slopes per subject
generate_mouse_data <- function(n_mice = 13, seed = 123, effect = TRUE) {
set.seed(seed)
# Mouse-specific random intercepts
#random_intercept_sd <- 551.05
mouse_random_intercept <- rnorm(n_mice, mean = 0, sd = 100)  # Bigger variability across mice
# Mouse-specific random slopes (i.e., how much their change over weeks differs)
#mouse_random_slope <- rnorm(n_mice, mean = 0, sd = 10)  # Mild variability in progression
# Base means and SDs for each week (your real data)
pre_mean  <- 4682.097
pre_sd    <- 844.2551
week1_mean <- 5136.659
week1_sd   <- 920.0022
week2_mean <- 6197.830
week2_sd   <- 920.0022
# If no effect, keep means similar across weeks
if (!effect) {
week1_mean <- pre_mean
week2_mean <- pre_mean
}
# Create empty lists to store week-by-week data
week_preinduction <- numeric(n_mice)
week_post1 <- numeric(n_mice)
week_post2 <- numeric(n_mice)
for (i in 1:n_mice) {
# Simulate each week for each mouse, adding mouse-specific intercept and slope
week_preinduction[i] <- rnorm(1, pre_mean + mouse_random_intercept[i], pre_sd)
week_post1[i] <- rnorm(1, week1_mean + mouse_random_intercept[i] + mouse_random_slope[i], week1_sd)
week_post2[i] <- rnorm(1, week2_mean + mouse_random_intercept[i] + 2 * mouse_random_slope[i], week2_sd)
# Note: `2 * slope` assumes more time has passed so slope accumulates.
}
# Assemble the dataframe
df <- data.frame(
id = 1:n_mice,
week_preinduction = week_preinduction,
week_post1 = week_post1,
week_post2 = week_post2
)
# Introduce dropout: randomly set Week 3 missing for 2 mice
drop_out <- sample(1:n_mice, 2)
df$week_post2[drop_out] <- NA
return(df)
}
library(dplyr)
library(ggplot2)
# 1. Summarize the data
df_summary_split <- combined_long %>%
# First, order weeks correctly
mutate(week = factor(week, levels = c("week_preinduction", "week_post1", "week_post2"))) %>%
group_by(group, week) %>%
summarise(
mean_distance = mean(distance, na.rm = TRUE),
se_distance = sd(distance, na.rm = TRUE) / sqrt(n())
)
generate_mouse_data <- function(n_mice = 13, seed = 123, effect = TRUE) {
set.seed(seed)
# Mouse-specific random intercepts
#random_intercept_sd <- 551.05
mouse_random_intercept <- rnorm(n_mice, mean = 0, sd = 100)  # Bigger variability across mice
# Mouse-specific random slopes (i.e., how much their change over weeks differs)
#mouse_random_slope <- rnorm(n_mice, mean = 0, sd = 10)  # Mild variability in progression
# Base means and SDs for each week (your real data)
pre_mean  <- 4682.097
pre_sd    <- 844.2551
week1_mean <- 5136.659
week1_sd   <- 920.0022
week2_mean <- 6197.830
week2_sd   <- 920.0022
# If no effect, keep means similar across weeks
if (!effect) {
week1_mean <- pre_mean
week2_mean <- pre_mean
}
# Create empty lists to store week-by-week data
week_preinduction <- numeric(n_mice)
week_post1 <- numeric(n_mice)
week_post2 <- numeric(n_mice)
for (i in 1:n_mice) {
# Simulate each week for each mouse, adding mouse-specific intercept and slope
week_preinduction[i] <- rnorm(1, pre_mean + mouse_random_intercept[i], pre_sd)
week_post1[i] <- rnorm(1, week1_mean + mouse_random_intercept[i] + mouse_random_slope[i], week1_sd)
week_post2[i] <- rnorm(1, week2_mean + mouse_random_intercept[i] + 2 * mouse_random_slope[i], week2_sd)
# Note: `2 * slope` assumes more time has passed so slope accumulates.
}
# Assemble the dataframe
df <- data.frame(
id = 1:n_mice,
week_preinduction = week_preinduction,
week_post1 = week_post1,
week_post2 = week_post2
)
# Introduce dropout: randomly set Week 3 missing for 2 mice
drop_out <- sample(1:n_mice, 2)
df$week_post2[drop_out] <- NA
return(df)
}
# Generate data WITH effect (true disease progression)
simulated_with_effect <- generate_mouse_data(effect = TRUE)
generate_mouse_data <- function(n_mice = 13, seed = 123, effect = TRUE) {
set.seed(seed)
# Mouse-specific random intercepts
#random_intercept_sd <- 551.05
mouse_random_intercept <- rnorm(n_mice, mean = 0, sd = 100)  # Bigger variability across mice
# Mouse-specific random slopes (i.e., how much their change over weeks differs)
mouse_random_slope <- rnorm(n_mice, mean = 0, sd = 10)  # Mild variability in progression
# Base means and SDs for each week (your real data)
pre_mean  <- 4682.097
pre_sd    <- 844.2551
week1_mean <- 5136.659
week1_sd   <- 920.0022
week2_mean <- 6197.830
week2_sd   <- 920.0022
# If no effect, keep means similar across weeks
if (!effect) {
week1_mean <- pre_mean
week2_mean <- pre_mean
}
# Create empty lists to store week-by-week data
week_preinduction <- numeric(n_mice)
week_post1 <- numeric(n_mice)
week_post2 <- numeric(n_mice)
for (i in 1:n_mice) {
# Simulate each week for each mouse, adding mouse-specific intercept and slope
week_preinduction[i] <- rnorm(1, pre_mean + mouse_random_intercept[i], pre_sd)
week_post1[i] <- rnorm(1, week1_mean + mouse_random_intercept[i] + mouse_random_slope[i], week1_sd)
week_post2[i] <- rnorm(1, week2_mean + mouse_random_intercept[i] + 2 * mouse_random_slope[i], week2_sd)
# Note: `2 * slope` assumes more time has passed so slope accumulates.
}
# Assemble the dataframe
df <- data.frame(
id = 1:n_mice,
week_preinduction = week_preinduction,
week_post1 = week_post1,
week_post2 = week_post2
)
# Introduce dropout: randomly set Week 3 missing for 2 mice
drop_out <- sample(1:n_mice, 2)
df$week_post2[drop_out] <- NA
return(df)
}
generate_mouse_data <- function(n_mice = 13, seed = 123, effect = TRUE) {
set.seed(seed)
# Generate an offset for each mouse
offset <- rnorm(n_mice, 0, 5)
# Base means and SDs for each week (from your real summary data)
pre_mean  <- 4682.097
pre_sd    <- 844.2551
week1_mean <- 5136.659
week1_sd   <- 920.0022
week2_mean <- 6197.830
week2_sd   <- 920.0022
# If no effect, keep all weeks similar
if (!effect) {
week1_mean <- pre_mean
week2_mean <- pre_mean
}
# Generate data
df <- data.frame(
id = 1:n_mice,
week_preinduction = rnorm(n_mice, pre_mean, pre_sd) + offset,
week_post1 = rnorm(n_mice, week1_mean, week1_sd) + offset,
week_post2 = rnorm(n_mice, week2_mean, week2_sd) + offset
)
# Simulate dropout: randomly make 2 mice missing in week_post2
drop_out <- sample(1:n_mice, 2)
df$week_post2[drop_out] <- NA
return(df)
}
# Generate data WITH effect (true disease progression)
simulated_with_effect <- generate_mouse_data(effect = TRUE)
print(simulated_with_effect)
# Generate data WITHOUT effect (no disease progression)
simulated_without_effect <- generate_mouse_data(effect = FALSE)
print(simulated_without_effect)
library(dplyr)
library(ggplot2)
# 1. Summarize the data
df_summary_split <- combined_long %>%
# First, order weeks correctly
mutate(week = factor(week, levels = c("week_preinduction", "week_post1", "week_post2"))) %>%
group_by(group, week) %>%
summarise(
mean_distance = mean(distance, na.rm = TRUE),
se_distance = sd(distance, na.rm = TRUE) / sqrt(n())
)
View(simulated_with_effect)
# Load necessary libraries
library(lme4)
library(dplyr)
library(future.apply)
# Data generation function
generate_mouse_data <- function(n_mice = 13, seed = 123, effect = TRUE) {
set.seed(seed)
# Generate an offset for each mouse
offset <- rnorm(n_mice, 0, 5)
# Base means and SDs for each week (from your real summary data)
pre_mean  <- 4682.097
pre_sd    <- 844.2551
week1_mean <- 5136.659
week1_sd   <- 920.0022
week2_mean <- 6197.830
week2_sd   <- 920.0022
# If no effect, keep all weeks similar
if (!effect) {
week1_mean <- pre_mean
week2_mean <- pre_mean
}
# Generate data
df <- data.frame(
id = 1:n_mice,
week_preinduction = rnorm(n_mice, pre_mean, pre_sd) + offset,
week_post1 = rnorm(n_mice, week1_mean, week1_sd) + offset,
week_post2 = rnorm(n_mice, week2_mean, week2_sd) + offset
)
# Simulate dropout: randomly make 2 mice missing in week_post2
drop_out <- sample(1:n_mice, 2)
df$week_post2[drop_out] <- NA
return(df)
}
# Set up parallel processing
n_simulations <- 1000
plan(multisession, workers = max(1, parallel::detectCores() - 2))
# Run simulations in parallel
results <- future_lapply(1:n_simulations, function(i) {
# Generate datasets
df_effect <- generate_mouse_data(effect = TRUE)
df_null <- generate_mouse_data(effect = FALSE)
# Fit linear mixed-effects models for both effect and null datasets
m_effect <- lmer(week_preinduction ~ week_post1 + week_post2 + (1 | id), data = df_effect)
m_null <- lmer(week_preinduction ~ week_post1 + week_post2 + (1 | id), data = df_null)
# Extract p-values for all fixed effects (Week1 and Week2)
p_effect <- summary(m_effect)$coefficients[, "Pr(>|t|)"]
p_null <- summary(m_null)$coefficients[, "Pr(>|t|)"]
# Return p-values for both models
list(
p_effect = p_effect,
p_null = p_null
)
}, future.seed = TRUE)
# Load necessary libraries
library(lme4)
library(dplyr)
library(future.apply)
# Data generation function
generate_mouse_data <- function(n_mice = 13, seed = 123, effect = TRUE) {
set.seed(seed)
# Generate an offset for each mouse
offset <- rnorm(n_mice, 0, 5)
# Base means and SDs for each week (from your real summary data)
pre_mean  <- 4682.097
pre_sd    <- 844.2551
week1_mean <- 5136.659
week1_sd   <- 920.0022
week2_mean <- 6197.830
week2_sd   <- 920.0022
# If no effect, keep all weeks similar
if (!effect) {
week1_mean <- pre_mean
week2_mean <- pre_mean
}
# Generate data
df <- data.frame(
id = 1:n_mice,
week_preinduction = rnorm(n_mice, pre_mean, pre_sd) + offset,
week_post1 = rnorm(n_mice, week1_mean, week1_sd) + offset,
week_post2 = rnorm(n_mice, week2_mean, week2_sd) + offset
)
# Simulate dropout: randomly make 2 mice missing in week_post2
drop_out <- sample(1:n_mice, 2)
df$week_post2[drop_out] <- NA
return(df)
}
# Set up parallel processing
n_simulations <- 1000
plan(multisession, workers = max(1, parallel::detectCores() - 2))
# Run simulations in parallel
results <- future_lapply(1:n_simulations, function(i) {
# Generate datasets
df_effect <- generate_mouse_data(effect = TRUE)
df_null <- generate_mouse_data(effect = FALSE)
# Fit linear mixed-effects models for both effect and null datasets
m_effect <-  lmer(distance ~ Week + (1 | ID), data = df_effect)
m_null <- lmer(distance ~ Week + (1 | ID), data = df_null)
# Extract p-values for all fixed effects (Week1 and Week2)
p_effect <- summary(m_effect)$coefficients[, "Pr(>|t|)"]
p_null <- summary(m_null)$coefficients[, "Pr(>|t|)"]
# Return p-values for both models
list(
p_effect = p_effect,
p_null = p_null
)
}, future.seed = TRUE)
View(simulated_with_effect)
